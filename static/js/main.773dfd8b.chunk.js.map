{"version":3,"sources":["components/Temperature.js","components/WeatherDescription.js","components/Atmosphere.js","components/Error.js","components/Loading.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Temperature","props","react_default","a","createElement","temp","toFixed","min","max","Description","title","desc","Atmosphere","pressure","humidity","Error","Loading","Weather","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","weatherData","isLoading","errorMessage","url","fetch","res","json","setState","_context","t0","message","console","log","e","preventDefault","zip","concat","process","getWeatherData","className","cod","_this$state$weatherDa","weather","main","description","icon","_this$state$weatherDa2","temp_min","temp_max","src","alt","height","width","WeatherDescription","components_Temperature","components_Atmosphere","components_Error","components_Loading","renderWeather","_this2","onSubmit","handleSubmit","value","onChange","target","type","pattern","placeholder","checkRender","Component","App","src_components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.773dfd8b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Temperature(props) {\n  return (\n    <div>\n      <p>Temp: {(props.temp * (9/5) - 459.67).toFixed(0)} F</p>\n      <p>Min Temp: {(props.min * (9/5) - 459.67).toFixed(0)} F</p>\n      <p>Max temp: {(props.max * (9/5) - 459.67).toFixed(0)} F</p>\n    </div>\n  )\n}\n\nexport default Temperature;","import React from 'react'\n\nfunction Description(props) {\n  return (\n    <div>\n      <p>Title: {props.title}</p>\n      <p>Description: {props.desc}</p>\n    </div>\n  )\n}\n\nexport default Description;","import React from 'react'\n\nfunction Atmosphere(props) {\n  return (\n    <div>\n      <p>Pressure: {props.pressure}</p>\n      <p>Humidity: {props.humidity}</p>\n    </div>\n  )\n}\n\nexport default Atmosphere;","import React from 'react'\n\nfunction Error() {\n    return (\n        <p> Error 404 :( please enter a valid Zipcode</p>\n    )\n}\n\n\nexport default Error;","import React from 'react'\n\nfunction Loading() {\n    return (\n        <p> Loading...</p>\n    )\n}\n\n\nexport default Loading;","import React, {Component} from 'react'\nimport Temperature from './Temperature'\nimport Description from './WeatherDescription'\nimport Atmosphere from './Atmosphere'\nimport Error from './Error'\nimport Loading from './Loading'\nimport './Weather.css'\n\nclass Weather extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputValue: '',     // Used to hold value entered in the input field\n      weatherData: null,  // Used to hold data loaded from the weather API\n      isLoading: false, // to check if data is still being loaded or already loaded\n      errorMessage: ''\n    }\n  }\n\n  async getWeatherData(url) {\n    try{\n      const res = await fetch(url)\n      const json = await res.json() \n      this.setState({ weatherData: json , isLoading: false})\n\n    } catch(err) {\n       // If there is no data \n       this.setState({ weatherData: null, errorMessage: err.message }) // Clear the weather data we don't have any to display\n       // Print an error to the console. \n       console.log('-- Error fetching --')\n       console.log(err.message)\n       // You may want to display an error to the screen here. \n     }\n  }\n\n  handleSubmit(e) {\n    this.setState({isLoading : true})\n    e.preventDefault()\n    const apikey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY\n    // Get the zip from the input\n    const zip = this.state.inputValue\n    // Form an API request URL with the apikey and zip\n    const url = `https://api.openweathermap.org/data/2.5/weather?zip=${zip},us&appid=${apikey}`\n    // const url = `https://api.openweathermap.org/data/2.5/weather?q=${zip},us&appid=${apikey}`\n\n    // calling .then on the promise\n    this.getWeatherData(url)\n    \n\n    if(this.state.errorMessage !== ''){\n      return <h3 className=\"error\"> { this.state.errorMessage } </h3>\n    }\n  }\n\n  renderWeather() {\n    // This method returns undefined or a JSX component\n    if (this.state.weatherData === null) { //\n      // If there is no data return undefined\n      return undefined\n    }\n \n    //check if json is valid\n    if (this.state.weatherData.cod === 200){  // if json status is valid, show data\n      // Take the weather data apart to more easily populate the component\n      const { main, description, icon } = this.state.weatherData.weather[0]\n      const { temp, pressure, humidity, temp_min, temp_max } = this.state.weatherData.main \n    \n      return (\n        <div>\n          <img src= {`http://openweathermap.org/img/w/${icon}.png`} alt='weather-icon' height='100' width='auto'></img>\n          <Description title={main} desc={description}/> \n          <Temperature temp = {temp} min={temp_min} max={temp_max} /> \n          <Atmosphere pressure = {pressure} humidity = {humidity}/>\n        </div>\n      )\n    } else{ //invalid zipcode\n      return (\n        <div>\n          <Error />\n        </div>\n      )\n    }\n  }\n    \n  checkRender() {\n    if (this.state.inputValue === ''){\n      return <p>Please enter zip</p>\n\n    } else if (this.state.isLoading === true){ //renders when waiting for json request data\n      return <Loading /> \n    }\n\n    return this.renderWeather()    \n  }\n\n  render() {\n    return (\n      <div className=\"weather\">\n\n        {/** This input uses the controlled component pattern */}\n        <form onSubmit={e => this.handleSubmit(e)}>\n\n          {/** \n          This pattern is used for input and other form elements \n          Set the value of the input to a value held in component state\n          Set the value held in component state when a change occurs at the input \n          */}\n          <input \n            value={this.state.inputValue} \n            onChange={e => this.setState({ inputValue: e.target.value })}\n            type=\"text\" \n            pattern=\"(\\d{5}([\\-]\\d{4})?)\"\n            placeholder=\"enter zip\"\n          />\n\n          <button className='submit-btn' type=\"submit\">Submit</button>\n\n        </form>\n\n        {/** Conditionally render this component */}\n        {this.checkRender()}\n\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","\nimport React, { Component } from 'react';\nimport Weather from './components/Weather'\nimport './App.css';\n\n/** \n * This example illustrates a simple react project \n * that works with an external API. \n * \n * Take note of the comments they point common \n * problems you will need to solve with React. \n * \n * There are two ideas here\n * - Input/Controlled Component Pattern\n * - Conditionally Rendering components \n * \n * The project has an input field where a user will\n * input a zip code. It finds weather data for that\n * zip and displays it in a component. \n * \n * */\n\nfunction App (){\n  \n    return (\n      <div className=\"App\">\n        <Weather />\n      </div> \n    );\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}